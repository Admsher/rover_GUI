from kivy.app import App
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.graphics.texture import Texture
from kivy.clock import Clock
import 
cv2

kv = """

WindowManager:
    Menu:
    WorkingScreen:
    Calendar:

<Menu>:
    name: "Menu"
    GridLayout:
        cols: 1
        Button:

            text: "START WORKOUT"
            on_release:
                app.root.current = "Workout"
                root.manager.transition.direction = "left"
        Button:
            text: "CALENDAR"
            on_release:
                app.root.current = "Calendar"
                root.manager.transition.direction = "left"

<WorkingScreen>:
    name: "Workout"
    BoxLayout: 
        orientation: 'vertical'
        BoxLayout:
            size_hint_y: None
            height: 48
            Button:

                text: "GO BACK"
                on_release:
                    app.root.current = "Menu"
                    root.manager.transition.direction = "right"
            Button:
                text: "STOP"
                on_release:
                    # app.root.current = "Menu"
                    # root.manager.transition.direction = "right"
                    root.stop()
        Image:
            id: video


<Calendar>:
    name: "Calendar"
    Button:
        size_hint: 0.25, 0.25
        pos_hint: {"x": 0.4, "y": 0.3}
        text: "Go Back"
        on_release:
            app.root.current = "Menu"
            root.manager.transition.direction = "right"
"""


class WindowManager(ScreenManager):
    pass


class Menu(Screen):
    pass


class WorkingScreen
(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.capture = cv2.VideoCapture(0)  # changed to 0 for my laptop
        self.schedule = None

    def on_enter(self, *args):
        self.schedule = Clock.schedule_interval(self.load_video, 1.0 / 30.0)

    def load_video(self, *args):
        ret, frame = self.capture.read()
        # Frame initialize
        # self.image_frame = frame
        buffer = cv2.flip(frame, 0).tobytes()
        texture = Texture.create(size=(frame.shape[1], frame.shape[0]), colorfmt='bgr')
        texture.blit_buffer(buffer, colorfmt='bgr', bufferfmt='ubyte')
        self.ids.video.texture = texture  # id video is defined in kv

    def stop(self):
        if self.schedule:
            self.schedule.cancel()
            self.schedule = None

    def on_leave(self, *args):
        self.stop()


class Calendar(Screen):
    pass


class MyMainApp(App):
    def build(self):
        return Builder.load_string(kv)